#!/usr/bin/perl -w

=head

 Die spammer: DIE
 Author:  gene@ology.net
 Created: 2001/07/13

 This is a single-user, spam-deflecting email client.  It's made to
 handle my tiny trickle of mail.  At the moment is is UNIX-centric, but
 there are other operating systems out there... I guess.

 For larger scales, a server installed, industrial strength, spam
 prevention and tracking system, such as http://razor.sourceforge.net/
 is necessary.

 Eventually, this little client will be able to deflect spam to handy
 spam-tracking databases and authorities.  Logging and digest email are
 desperately needed features...

 Why did I make this?  Personally, I hate spam.  Also, I got tired of
 depending on my mailserver(s) to do a good job.

=cut

# First off, do the right thing.
use strict;
#use Data::Dumper;
use Getopt::Std;
use Term::ReadKey;
use IO::File;
use Mail::POP3Client;
use Mail::SpamAssassin;
use Mail::SpamAssassin::MyMailAudit;

# Flush zee buffer!
$| = 1;

# Show the program usage if asked.
if (!@ARGV || $ARGV[0] eq '-v' || $ARGV[0] eq '--version' ||
              $ARGV[0] eq '-h' || $ARGV[0] eq '--help') {
  print <<USAGE;
# Die spammer: DIE - gene\@ology.net
Defaults: -d => 0, -a => PASS,  -t => mbox
          -s => /var/mail/user, -r => ./spamassassin.cf
Usage: $0 [-dhv] -u user [-p password] \\
       -H mail.host.xx [-a auth_mode] [-r rules] \\
       [-t mailbox_type] [-s mail_spool]
USAGE
  exit;
}

# Initialize the context.
#  $Data::Dumper::Terse  = 1;
#  $Data::Dumper::Indent = 1;

my %o = (
  u => 'gene',
  p => 'gr4h4m7',
  H => 'mail.webformix.net',
  s => '/var/mail/gene',
);

# Grab the command-line option switches.
getopt('adHpstu', \%o);

# Alias the config options so that they are readable.
@o{qw(user word host)} = @o{qw(u p H)};
$o{rules} = $o{r} || 'spamassassin.cf';
$o{spool} = $o{s} || "/var/mail/$o{user}";
$o{debug} = 0      unless $o{d};
$o{type}  = 'mbox' unless $o{t};
$o{auth}  = 'PASS' unless $o{a};

die "No user, password or host provided.\n"
  unless $o{user} && $o{host};

unless ($o{word}) {
  # Grab the password from the console.
  print 'Enter your password: ';
  ReadMode('noecho');
  $o{word} = ReadLine(0);
  chomp $o{word};
  die "No password provided for $o{user}\n"
    unless $o{word};
  ReadMode('normal');
}

# Connect to the mail server.
printf "%s\nProbing %s for %s... ",
  scalar localtime, $o{host}, $o{user};

my $pop = Mail::POP3Client->new(DEBUG     => $o{debug},
                                AUTH_MODE => $o{auth},
                                HOST      => $o{host},
                                USER      => $o{user},
                                PASSWORD  => $o{word} );

# Fondle the new mail if there is any.
unless ($pop->Count() > 0) {
  print "no mail.\n"
}
else {
  # Set up the spam assassin.
  my $assassin = Mail::SpamAssassin->new();

  # What are we lookin' at here?
  printf "\nMessages: %d (%s octets)\n",
    $pop->Count(), $pop->Size();

  # Make a numbered hash of the new message sizes.
  my $msgs = {};
  for ($pop->List()) {
    my @msg = split;
    $msgs->{$msg[0]} = { size => $msg[1] };
  }
#  die Dumper($msgs), "\n";

  # Open the mail spool for appending.
  my $fh = IO::File->new($o{spool}, '>>');

  # Set the interesting attributes of the message and then cope with it.
  while (my ($num, $size) = each %$msgs) {
    # Grab the "Subject" and "From" parts.
    for ($pop->Head($num)) {
      $msgs->{$num}{subject} = $1 if /^(?:Subject:)\s+(.+?)$/io;
      $msgs->{$num}{from}    = $1 if /^(?:From:)\s+(.+?)$/io;
    }

    # amispamornot ?
    my @msg = $pop->Retrieve($num);
    my $mail = Mail::SpamAssassin::MyMailAudit->new(data => \@msg);
    my $status = $assassin->check($mail);
    $msgs->{$num}{spam} = $status->is_spam() ? 1 : 0;

    # Appropriately cope with this piece of mail.
    cope($msgs, $pop, $fh, $num);
  }

#  print Dumper($msgs), "\n";

  # Again, the basic file handle method,
  $fh->close;
}

# "Clean up this mess young man!"
$pop->Close();

exit;

#-------------------------------------------------#
# Appropriately cope with a numbered piece of mail.
#
sub cope {
  my ($msgs, $pop, $fh, $num) = @_;

  # Show the abstract of this message.
  printf "%s: %d (%d octets)\n\t%s\n\t%s\n",
    ($msgs->{$num}{spam} ? 'Smells like spam' : 'Looks OK'),
    $num, $msgs->{$num}{size},
    $msgs->{$num}{from}, $msgs->{$num}{subject};

  if ($msgs->{$num}{spam} && prompt('Toss this stinky trash?', 'yes')) {
    $pop->Delete($num)
  }
  else {
    if (prompt('Save this message locally?', 'yes')) {
      # Fix the message start and line endings.
      my $msg = substr $pop->Retrieve($num), 1;
      $msg =~ s/\015\012?/\012/g;
      print $fh $msg;
    }

    $pop->Delete($num)
      if prompt('Keep this message on the server?', 'no');
  }
}

# "Who is stronger: Mighty Mouse or Superman?"
sub prompt {
  my ($message, $default) = @_;
  $default = 'yes' unless $default;
  print "$message [$default] ";
  my $line = ReadLine 0;
  chomp $line;
  return !$line || (uc (substr $line, 0, 1) eq
                    uc (substr $default, 0, 1));
}
